version: '3.5'

x-logging: &logging
  logging:
    driver: 'json-file'
    options:
      max-size: '100m'

services:
  postgres:
    container_name: postgres
    image: 'postgres:15'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5433:5432'
    restart: unless-stopped
    networks:
      - testnet
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ../dbinit.sql:/docker-entrypoint-initdb.d/init.sql

  # Wallet
  wallet-backend:
    container_name: wallet-backend
    build:
      context: ../..
      dockerfile: ./packages/wallet/backend/Dockerfile.dev
    depends_on:
      - postgres
      - rafiki-backend
      - redis
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgres://wallet_backend:wallet_backend@postgres/wallet_backend
      COOKIE_NAME: testnet.cookie
      COOKIE_PASSWORD: testnet.cookie.password.super.secret.ilp
      COOKIE_TTL: 2630000
      OPEN_PAYMENTS_HOST: https://rafiki-backend
      GRAPHQL_ENDPOINT: http://rafiki-backend:3001/graphql
      AUTH_GRAPHQL_ENDPOINT: http://rafiki-auth:3008/graphql
      AUTH_DOMAIN: http://rafiki-auth:3009
      AUTH_IDENTITY_SERVER_SECRET: ${AUTH_IDENTITY_SERVER_SECRET}
      RAFIKI_WEBHOOK_SIGNATURE_SECRET: ${RAFIKI_SIGNATURE_SECRET:-327132b5-99e9-4eb8-8a25-2b7d7738ece1}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      SEND_EMAIL: ${SEND_EMAIL:-false}
      REDIS_URL: redis://redis:6379/0
      KRATOS_ADMIN_URL: 'http://kratos:4434/admin'
      GATEHUB_ACCESS_KEY: ${GATEHUB_ACCESS_KEY}
      GATEHUB_SECRET_KEY: ${GATEHUB_SECRET_KEY}
      GATEHUB_WEBHOOK_SECRET: ${GATEHUB_WEBHOOK_SECRET}
      GATEHUB_GATEWAY_UUID: ${GATEHUB_GATEWAY_UUID}
      GATEHUB_VAULT_UUID_EUR: ${GATEHUB_VAULT_UUID_EUR}
      GATEHUB_VAULT_UUID_USD: ${GATEHUB_VAULT_UUID_USD}
      GATEHUB_SETTLEMENT_WALLET_ADDRESS: ${GATEHUB_SETTLEMENT_WALLET_ADDRESS}
      GATEHUB_CARD_APP_ID: ${GATEHUB_CARD_APP_ID}
      GATEHUB_ACCOUNT_PRODUCT_CODE: ${GATEHUB_ACCOUNT_PRODUCT_CODE}
      GATEHUB_CARD_PRODUCT_CODE: ${GATEHUB_CARD_PRODUCT_CODE}
      GATEHUB_NAME_ON_CARD: ${GATEHUB_NAME_ON_CARD}
      GATEHUB_CARD_PP_PREFIX: ${GATEHUB_CARD_PP_PREFIX}
    restart: always
    networks:
      - testnet
    ports:
      - '3003:3003'
      - '9229:9229' # Map debugger port to local machine's port 9229
    <<: *logging

  # Boutique
  boutique-backend:
    container_name: boutique-backend
    build:
      context: ../..
      dockerfile: ./packages/boutique/backend/Dockerfile.dev
    depends_on:
      - postgres
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgres://boutique_backend:boutique_backend@postgres/boutique_backend
      PRIVATE_KEY: ${PRIVATE_KEY}
      KEY_ID: ${KEY_ID}
      PAYMENT_POINTER: ${PAYMENT_POINTER}
    restart: always
    networks:
      - testnet
    ports:
      - '3004:3004'
    <<: *logging

  # Rafiki
  rafiki-auth:
    container_name: rafiki-auth
    image: ghcr.io/interledger/rafiki-auth:v1.0.0-alpha.19
    restart: always
    networks:
      - testnet
    ports:
      - '3006:3006'
      - '3008:3008'
    environment:
      AUTH_PORT: 3006
      INTROSPECTION_PORT: 3007
      ADMIN_PORT: 3008
      NODE_ENV: development
      AUTH_SERVER_URL: http://localhost:3006
      AUTH_DATABASE_URL: postgresql://rafiki_auth:rafiki_auth@postgres/rafiki_auth
      IDENTITY_SERVER_URL: http://localhost:4003/grant-interactions
      IDENTITY_SERVER_SECRET: ${AUTH_IDENTITY_SERVER_SECRET:-327132b5-99e9-4eb8-8a25-2b7d7738ece1}
      COOKIE_KEY: ${AUTH_COOKIE_KEY:-8fd398393c47dd27a3167d9c081c094f}
      INTERACTION_COOKIE_SAME_SITE: ${AUTH_INTERACTION_COOKIE_SAME_SITE:-none}
      WAIT_SECONDS: 1
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - postgres
    <<: *logging

  rafiki-backend:
    container_name: rafiki-backend
    image: ghcr.io/interledger/rafiki-backend:v1.0.0-alpha.19
    restart: always
    privileged: true
    volumes:
      - ../temp/:/workspace/temp/
    ports:
      - '3010:80'
      - '3011:3001'
      - '3005:3005'
      - '3002:3002'
    networks:
      - testnet
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
      ADMIN_PORT: 3001
      CONNECTOR_PORT: 3002
      OPEN_PAYMENTS_PORT: 80
      DATABASE_URL: postgresql://rafiki_backend:rafiki_backend@postgres/rafiki_backend
      USE_TIGERBEETLE: true
      TIGERBEETLE_CLUSTER_ID: 0
      TIGERBEETLE_REPLICA_ADDRESSES: 10.5.0.50:4342
      NONCE_REDIS_KEY: test
      AUTH_SERVER_GRANT_URL: http://rafiki-auth:3006
      AUTH_SERVER_INTROSPECTION_URL: http://rafiki-auth:3007
      ILP_ADDRESS: test.net
      ILP_CONNECTOR_URL: http://127.0.0.1:3002
      STREAM_SECRET: BjPXtnd00G2mRQwP/8ZpwyZASOch5sUXT5o0iR5b5wU=
      ADMIN_KEY: admin
      OPEN_PAYMENTS_URL: http://rafiki-backend
      REDIS_URL: redis://redis:6379/0
      WALLET_ADDRESS_URL: https://rafiki-backend/.well-known/pay
      # Testnet urls - not implemented
      WEBHOOK_URL: http://wallet-backend:3003/webhooks
      WEBHOOK_TIMEOUT: 60000
      SIGNATURE_SECRET: ${RAFIKI_SIGNATURE_SECRET:-327132b5-99e9-4eb8-8a25-2b7d7738ece1}
      EXCHANGE_RATES_URL: http://wallet-backend:3003/rates
      ENABLE_AUTO_PEERING: true
      AUTO_PEERING_SERVER_PORT: 3005
      INSTANCE_NAME: 'Testnet Wallet'
      SLIPPAGE: 0.01
      KEY_ID: rafiki
    depends_on:
      - postgres
      - redis
    <<: *logging

  rafiki-frontend:
    container_name: rafiki-frontend
    image: ghcr.io/interledger/rafiki-frontend:v1.0.0-alpha.19
    depends_on:
      - rafiki-backend
    restart: always
    privileged: true
    ports:
      - '3012:3012'
    networks:
      - testnet
    environment:
      PORT: 3012
      GRAPHQL_URL: http://rafiki-backend:3001/graphql
      OPEN_PAYMENTS_URL: https://rafiki-backend/
      ENABLE_INSECURE_MESSAGE_COOKIE: true
      KRATOS_CONTAINER_PUBLIC_URL: 'http://kratos:4433'
      KRATOS_BROWSER_PUBLIC_URL: 'http://localhost:4433'
      KRATOS_ADMIN_URL: 'http://kratos:4434/admin'
      AUTH_ENABLED: false
    <<: *logging

  kratos:
    image: 'oryd/kratos:v1.3.0'
    privileged: true
    depends_on:
      - postgres
      - mailslurper
    ports:
      - '4433:4433'
    volumes:
      - ../entrypoint.sh:/entrypoint.sh
      - ../identity.schema.json:/etc/config/kratos/identity.schema.json
      - ./kratos.yml:/etc/config/kratos/kratos.yml
    entrypoint: ['/entrypoint.sh']
    networks:
      - testnet

  tigerbeetle:
    image: ghcr.io/tigerbeetle/tigerbeetle:0.16.8
    privileged: true
    volumes:
      - tigerbeetle-data:/var/lib/tigerbeetle
    networks:
      testnet:
        ipv4_address: 10.5.0.50
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -ex
        DATA_FILE=/var/lib/tigerbeetle/cluster_0_replica_0.tigerbeetle
        set +e
        ls $$DATA_FILE
        DATA_FILE_EXISTS="$$?"
        set -e
        echo $$DATA_FILE_EXISTS
        if [ "$$DATA_FILE_EXISTS" != 0 ]; then 
          ./tigerbeetle format --cluster=0 --replica=0 --replica-count=1 $$DATA_FILE; 
        fi
        hostname -i
        ls /var/lib/tigerbeetle
        ./tigerbeetle start --addresses=0.0.0.0:4342 $$DATA_FILE

  redis:
    image: 'redis:7'
    restart: unless-stopped
    networks:
      - testnet

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - '4436:4436'
      - '4437:4437'
    networks:
      - testnet

networks:
  testnet:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/24
          gateway: 10.5.0.1

volumes:
  pg-data:
  tigerbeetle-data: # named volumes can be managed easier using docker-compose
