version: '3.8'
name: 'testnet'

x-logging: &logging
  logging:
    driver: 'gcplogs'

services:
  postgres:
    image: 'postgres:15'
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - testnet
    restart: unless-stopped
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ../dbinit.sql:/docker-entrypoint-initdb.d/init.sql

  wallet-frontend:
    hostname: wallet-frontend
    build:
      context: ../..
      dockerfile: ./packages/wallet/frontend/Dockerfile.prod
      args:
        PORT: ${WALLET_FRONTEND_PORT}
        COOKIE_NAME: ${WALLET_BACKEND_COOKIE_NAME}
        NEXT_PUBLIC_BACKEND_URL: ${WALLET_FRONTEND_BACKEND_URL}
        NEXT_PUBLIC_OPEN_PAYMENTS_HOST: ${WALLET_FRONTEND_OPEN_PAYMENTS_HOST}
        NEXT_PUBLIC_AUTH_HOST: ${WALLET_FRONTEND_AUTH_HOST}
    container_name: wallet-frontend
    ports:
      - '${WALLET_FRONTEND_PORT}:${WALLET_FRONTEND_PORT}'
    restart: always
    <<: *logging

  wallet-backend:
    build:
      context: ../..
      dockerfile: ./packages/wallet/backend/Dockerfile.prod
    container_name: wallet-backend
    depends_on:
      - postgres
      - rafiki-backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${WALLET_BACKEND_PORT}
      DATABASE_URL: ${WALLET_BACKEND_DATABASE_URL}
      COOKIE_NAME: ${WALLET_BACKEND_COOKIE_NAME}
      COOKIE_PASSWORD: ${WALLET_BACKEND_COOKIE_PASSWORD}
      COOKIE_TTL: ${WALLET_BACKEND_COOKIE_TTL}
      OPEN_PAYMENTS_HOST: ${WALLET_BACKEND_OPEN_PAYMENTS_HOST}
      GRAPHQL_ENDPOINT: ${WALLET_BACKEND_GRAPHQL_ENDPOINT}
      RAFIKI_MONEY_FRONTEND_HOST: ${WALLET_BACKEND_RAFIKI_MONEY_FRONTEND_HOST}
      SENDGRID_API_KEY: ${WALLET_BACKEND_SENDGRID_API_KEY}
      FROM_EMAIL: ${WALLET_BACKEND_FROM_EMAIL}
      SEND_EMAIL: ${WALLET_BACKEND_SEND_EMAIL}
      AUTH_IDENTITY_SERVER_SECRET: ${RAFIKI_AUTH_IDENTITY_SERVER_SECRET}
      AUTH_DOMAIN: ${WALLET_BACKEND_AUTH_DOMAIN}
      REDIS_URL: ${WALLET_BACKEND_REDIS_URL}
      GATEHUB_ACCESS_KEY: ${WALLET_BACKEND_GATEHUB_ACCESS_KEY}
      GATEHUB_SECRET_KEY: ${WALLET_BACKEND_GATEHUB_SECRET_KEY}
      GATEHUB_GATEWAY_UUID: ${WALLET_BACKEND_GATEHUB_GATEWAY_UUID}
      GATEHUB_VAULT_UUID_EUR: ${WALLET_BACKEND_GATEHUB_VAULT_UUID_EUR}
      GATEHUB_VAULT_UUID_USD: ${WALLET_BACKEND_GATEHUB_VAULT_UUID_USD}
      GATEHUB_SETTLEMENT_WALLET_ADDRESS: ${WALLET_BACKEND_GATEHUB_SETTLEMENT_WALLET_ADDRESS}
      GATEHUB_CARD_APP_ID: ${WALLET_BACKEND_GATEHUB_CARD_APP_ID}
    networks:
      - testnet
    ports:
      - '${WALLET_BACKEND_PORT}:${WALLET_BACKEND_PORT}'
    restart: always
    <<: *logging

  boutique-frontend:
    container_name: boutique-frontend
    build:
      context: ../..
      dockerfile: ./packages/boutique/frontend/Dockerfile.prod
      args:
        VITE_API_BASE_URL: ${BOUTIQUE_FRONTEND_API_BASE_URL}
        PORT: ${BOUTIQUE_FRONTEND_API_BASE_URL}
    depends_on:
      - postgres
    environment:
      NODE_ENV: ${NODE_ENV}
    restart: always
    networks:
      - testnet
    ports:
      - '${BOUTIQUE_FRONTEND_PORT}:${BOUTIQUE_FRONTEND_PORT}'
    <<: *logging

  boutique-backend:
    container_name: boutique-backend
    build:
      context: ../..
      dockerfile: ./packages/boutique/backend/Dockerfile.prod
    depends_on:
      - postgres
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BOUTIQUE_BACKEND_PORT}
      FRONTEND_URL: ${BOUTIQUE_BACKEND_FRONTEND_URL}
      DATABASE_URL: ${BOUTIQUE_BACKEND_DATABASE_URL}
      PRIVATE_KEY: ${BOUTIQUE_BACKEND_PRIVATE_KEY}
      KEY_ID: ${BOUTIQUE_BACKEND_KEY_ID}
      PAYMENT_POINTER: ${BOUTIQUE_BACKEND_PAYMENT_POINTER}
    restart: always
    networks:
      - testnet
    ports:
      - '3004:3004'
    <<: *logging

  rafiki-auth:
    image: ghcr.io/interledger/rafiki-auth:v1.0.0-alpha.17
    container_name: rafiki-auth
    environment:
      NODE_ENV: ${NODE_ENV}
      AUTH_PORT: ${RAFIKI_AUTH_PORT}
      ADMIN_PORT: ${RAFIKI_AUTH_ADMIN_PORT}
      INTROSPECTION_PORT: ${RAFIKI_AUTH_INTROSPECTION_PORT}
      AUTH_DATABASE_URL: ${RAFIKI_AUTH_DATABASE_URL}
      COOKIE_KEY: ${RAFIKI_AUTH_COOKIE_KEY}
      IDENTITY_SERVER_SECRET: ${RAFIKI_AUTH_IDENTITY_SERVER_SECRET}
      IDENTITY_SERVER_URL: ${RAFIKI_AUTH_IDENTITY_SERVER_DOMAIN}
      AUTH_SERVER_URL: ${RAFIKI_AUTH_SERVER_DOMAIN}
      WAIT_SECONDS: ${RAFIKI_AUTH_WAIT_SECONDS}
      TRUST_PROXY: true
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - postgres
    networks:
      - testnet
    ports:
      - '${RAFIKI_AUTH_PORT}:${RAFIKI_AUTH_PORT}'
      - '${RAFIKI_AUTH_ADMIN_PORT}:${RAFIKI_AUTH_ADMIN_PORT}'
    restart: always
    <<: *logging

  rafiki-backend:
    image: ghcr.io/interledger/rafiki-backend:v1.0.0-alpha.17
    container_name: rafiki-backend
    depends_on:
      - postgres
      - redis
    environment:
      NODE_ENV: ${NODE_ENV}
      LOG_LEVEL: ${RAFIKI_BACKEND_LOG_LEVEL}
      ADMIN_PORT: ${RAFIKI_BACKEND_ADMIN_PORT}
      CONNECTOR_PORT: ${RAFIKI_BACKEND_CONNECTOR_PORT}
      OPEN_PAYMENTS_PORT: ${RAFIKI_BACKEND_OPEN_PAYMENTS_PORT}
      DATABASE_URL: ${RAFIKI_BACKEND_DATABASE_URL}
      USE_TIGERBEETLE: ${RAFIKI_BACKEND_USE_TIGERBEETLE}
      TIGERBEETLE_CLUSTER_ID: ${RAFIKI_BACKEND_TIGERBEETLE_CLUSTER_ID}
      TIGERBEETLE_REPLICA_ADDRESSES: ${RAFIKI_BACKEND_TIGERBEETLE_REPLICA_ADDRESSES}
      NONCE_REDIS_KEY: ${RAFIKI_BACKEND_NONCE_REDIS_KEY}
      AUTH_SERVER_GRANT_URL: ${RAFIKI_BACKEND_AUTH_SERVER_GRANT_URL}
      AUTH_SERVER_INTROSPECTION_URL: ${RAFIKI_BACKEND_AUTH_SERVER_INTROSPECTION_URL}
      ILP_ADDRESS: ${RAFIKI_BACKEND_ILP_ADDRESS}
      STREAM_SECRET: ${RAFIKI_BACKEND_STREAM_SECRET}
      ADMIN_KEY: ${RAFIKI_BACKEND_ADMIN_KEY}
      OPEN_PAYMENTS_URL: ${RAFIKI_BACKEND_OPEN_PAYMENTS_URL}
      REDIS_URL: ${RAFIKI_BACKEND_REDIS_URL}
      WALLET_ADDRESS_URL: ${RAFIKI_BACKEND_WALLET_ADDRESS_URL}
      WEBHOOK_URL: ${RAFIKI_BACKEND_WEBHOOK_URL}
      WEBHOOK_TIMEOUT: ${RAFIKI_BACKEND_WEBHOOK_TIMEOUT}
      EXCHANGE_RATES_URL: ${RAFIKI_BACKEND_EXCHANGE_RATES_URL}
      TRUST_PROXY: true
      ENABLE_AUTO_PEERING: true
      AUTO_PEERING_SERVER_PORT: ${RAFIKI_BACKEND_AUTOPEERING_PORT}
      ILP_CONNECTOR_URL: ${RAFIKI_BACKEND_ILP_CONNECTOR_ADDRESS}
      INSTANCE_NAME: ${RAFIKI_BACKEND_INSTANCE_NAME}
      SLIPPAGE: ${RAFIKI_BACKEND_SLIPPAGE}
      ENABLE_TELEMETRY: ${RAFIKI_BACKEND_ENABLE_TELEMETRY}
      LIVENET: ${RAFIKI_BACKEND_LIVENET}
      KEY_ID: ${RAFIKI_BACKEND_KEY_ID}
    networks:
      - testnet
    ports:
      - '3010:80'
      - '3011:3001'
      - '${RAFIKI_BACKEND_AUTOPEERING_PORT}:${RAFIKI_BACKEND_AUTOPEERING_PORT}'
      - '${RAFIKI_BACKEND_CONNECTOR_PORT}:${RAFIKI_BACKEND_CONNECTOR_PORT}'
    privileged: true
    restart: always
    volumes:
      - ../temp/:/workspace/temp/
    <<: *logging

  interledger-pay:
    image: ghcr.io/interledger/interledger-pay:latest
    container_name: interledger-pay
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${INTERLEDGER_PAY_PORT}
      KEY_ID: ${INTERLEDGER_PAY_KEY_ID}
      PRIVATE_KEY: ${INTERLEDGER_PAY_PRIVATE_KEY}
      WALLET_ADDRESS: ${INTERLEDGER_PAY_WALLET_ADDRESS}
      REDIRECT_URL: ${INTERLEDGER_PAY_REDIRECT_URL}
      INTERLEDGER_PAY_HOST: ${INTERLEDGER_PAY_HOST}
      SESSION_COOKIE_SECRET_KEY: ${INTERLEDGER_PAY_SESSION_COOKIE_SECRET_KEY}
    networks:
      - testnet
    restart: always
    privileged: true
    ports:
      - '${INTERLEDGER_PAY_PORT}:${INTERLEDGER_PAY_PORT}'
    <<: *logging

  rafiki-frontend:
    image: ghcr.io/interledger/rafiki-frontend:v1.0.0-alpha.17
    container_name: rafiki-frontend
    depends_on:
      - rafiki-backend
    environment:
      PORT: ${RAFIKI_FRONTEND_PORT}
      GRAPHQL_URL: ${RAFIKI_FRONTEND_GRAPHQL_URL}
      OPEN_PAYMENTS_URL: ${RAFIKI_FRONTEND_OPEN_PAYMENTS_URL}
      KRATOS_CONTAINER_PUBLIC_URL: 'http://kratos:4433'
      KRATOS_BROWSER_PUBLIC_URL: 'https://admin.rafiki.money/kratos'
      KRATOS_ADMIN_URL: 'http://kratos:4434/admin'
    networks:
      - testnet
    restart: always
    privileged: true
    ports:
      - '${RAFIKI_FRONTEND_PORT}:${RAFIKI_FRONTEND_PORT}'
    <<: *logging

  tigerbeetle:
    image: ghcr.io/tigerbeetle/tigerbeetle:0.16.3
    privileged: true
    volumes:
      - tigerbeetle-data:/var/lib/tigerbeetle
    networks:
      testnet:
        ipv4_address: 10.5.0.50
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -ex
        DATA_FILE=/var/lib/tigerbeetle/cluster_0_replica_0.tigerbeetle
        set +e
        ls $$DATA_FILE
        DATA_FILE_EXISTS="$$?"
        set -e
        echo $$DATA_FILE_EXISTS
        if [ "$$DATA_FILE_EXISTS" != 0 ]; then 
          ./tigerbeetle format --cluster=0 --replica=0 --replica-count=1 $$DATA_FILE; 
        fi
        hostname -i
        ls /var/lib/tigerbeetle
        ./tigerbeetle start --addresses=0.0.0.0:4342 $$DATA_FILE

  redis:
    image: 'redis:7'
    restart: unless-stopped
    networks:
      - testnet

  kratos:
    image: 'oryd/kratos:v1.2.0'
    privileged: true
    ports:
      - '4433:4433'
    volumes:
      - ../entrypoint.sh:/entrypoint.sh
      - ../identity.schema.json:/etc/config/kratos/identity.schema.json
      - ./kratos.yml:/etc/config/kratos/kratos.yml
    entrypoint: ['/entrypoint.sh']
    networks:
      - testnet

networks:
  testnet:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/24
          gateway: 10.5.0.1

volumes:
  pg-data:
  tigerbeetle-data: # named volumes can be managed easier using docker-compose
